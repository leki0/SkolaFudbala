/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rs.ac.bg.fon.ai.skolafudbala.forme;

import java.io.IOException;
import rs.ac.bg.fon.ai.skolafudbala.klijent.Klijent;
import rs.ac.bg.fon.ai.skolafudbala.model.Trener;
import rs.ac.bg.fon.ai.skolafudbala.nacinprikazaforme.Prikaz;
import javax.swing.JOptionPane;



/**
 *
 * @author Korisnik
 */
public class UnosIzmjenaTreneraForma extends javax.swing.JFrame {

    Trener trenerIzmjena;
    Trener t;
    Prikaz nacinPrikaza;
    PregledTreneraForma ptf;

    /**
     * Creates new form UnosTreneraForma
     */
    public UnosIzmjenaTreneraForma(PregledTreneraForma ptf, Prikaz nacinPrikaza, Trener trenerIzmjena) {
        initComponents();
        this.nacinPrikaza = nacinPrikaza;
        this.trenerIzmjena = trenerIzmjena;
        prikaz(nacinPrikaza, trenerIzmjena);
        this.ptf = ptf;
    }

    public UnosIzmjenaTreneraForma(Prikaz nacinPrikaza, Trener trenerIzmjena) {
        initComponents();
        this.nacinPrikaza = nacinPrikaza;
        this.trenerIzmjena = trenerIzmjena;
        prikaz(nacinPrikaza, trenerIzmjena);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldIme = new javax.swing.JTextField();
        jTextFieldPrezime = new javax.swing.JTextField();
        jTextFieldJMBG = new javax.swing.JTextField();
        jTextFieldIskustvo = new javax.swing.JTextField();
        jButtonDodaj = new javax.swing.JButton();
        jButtonPonisti = new javax.swing.JButton();
        jButtonSacuvajIzmjene = new javax.swing.JButton();
        jButtonObrisi = new javax.swing.JButton();
        jButtonOdustani = new javax.swing.JButton();
        jLabelBrisanje = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ime:");

        jLabel2.setText("Prezime:");

        jLabel3.setText("JMBG:");

        jLabel4.setText("Godine iskustva:");

        jTextFieldJMBG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldJMBGActionPerformed(evt);
            }
        });

        jTextFieldIskustvo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIskustvoActionPerformed(evt);
            }
        });

        jButtonDodaj.setText("Dodaj");
        jButtonDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajActionPerformed(evt);
            }
        });

        jButtonPonisti.setText("Poništi");
        jButtonPonisti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPonistiActionPerformed(evt);
            }
        });

        jButtonSacuvajIzmjene.setText("Sačuvaj izmjene");
        jButtonSacuvajIzmjene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSacuvajIzmjeneActionPerformed(evt);
            }
        });

        jButtonObrisi.setText("Obriši");
        jButtonObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonObrisiActionPerformed(evt);
            }
        });

        jButtonOdustani.setText("Odustani");
        jButtonOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOdustaniActionPerformed(evt);
            }
        });

        jLabelBrisanje.setText("Detaljne informacije o korisniku:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(51, 51, 51)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldIme, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                                .addComponent(jTextFieldPrezime)
                                .addComponent(jTextFieldJMBG)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButtonDodaj, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextFieldIskustvo))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(34, 34, 34)
                                    .addComponent(jButtonSacuvajIzmjene, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                                    .addComponent(jButtonPonisti, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jLabelBrisanje, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabelBrisanje)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldIme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldPrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldJMBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextFieldIskustvo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonObrisi)
                    .addComponent(jButtonOdustani))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDodaj)
                    .addComponent(jButtonPonisti)
                    .addComponent(jButtonSacuvajIzmjene))
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldJMBGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldJMBGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldJMBGActionPerformed

    private void jTextFieldIskustvoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIskustvoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIskustvoActionPerformed

    private void jButtonPonistiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPonistiActionPerformed
        ponovniUnos();
    }//GEN-LAST:event_jButtonPonistiActionPerformed

    private void jButtonDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajActionPerformed
        String ime = jTextFieldIme.getText();
        String prezime = jTextFieldPrezime.getText();
        String jmbg = jTextFieldJMBG.getText();
        String godineIskustvaString = jTextFieldIskustvo.getText();
        String validan = validacija(ime, prezime, jmbg, godineIskustvaString);
        if (validan.equals("")) {
            try {
                String validanFormat = validirajFormat(ime, prezime, jmbg, godineIskustvaString);
                if (validanFormat.equals("")) {
                    int godineIskustvaInt = Integer.parseInt(godineIskustvaString);
                    t = new Trener(ime, prezime, jmbg, godineIskustvaInt);
                    long trenerId = Klijent.getInstance().zapamtiTrenera(t);
                    JOptionPane.showMessageDialog(this, "Sistem je zapamtio trenera", "Trener zapamcen", JOptionPane.INFORMATION_MESSAGE);
                    ponovniUnos();
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti trenera!", "GRESKA", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Neispravan format unosa: " + validanFormat, "GRESKA", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                if (ex instanceof IOException) {
                    JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                } else {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "GREšKA", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti trenera!", "GRESKA", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Morate da popunite polja: " + validan, "GRESKA", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jButtonDodajActionPerformed

    private void jButtonSacuvajIzmjeneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSacuvajIzmjeneActionPerformed
        String ime = jTextFieldIme.getText();
        String prezime = jTextFieldPrezime.getText();
        String jmbg = jTextFieldJMBG.getText();
        String godineIskustvaString = jTextFieldIskustvo.getText();
        String validan = validacija(ime, prezime, jmbg, godineIskustvaString);
        if (validan.equals("")) {
            try {
                String validanFormat = validirajFormat(ime, prezime, jmbg, godineIskustvaString);
                if (validanFormat.equals("")) {
                    int godineIskustvaInt = Integer.parseInt(godineIskustvaString);
                    Trener trenerUpdate = new Trener(trenerIzmjena.getTrenerId(), ime, prezime, jmbg, godineIskustvaInt);
                    int izmjenjenTrener = Klijent.getInstance().zapamtiIzmjeneTrenera(trenerUpdate);
                    JOptionPane.showMessageDialog(this, "Sistem je zapamtio trenera!", "Trener zapamcen", JOptionPane.INFORMATION_MESSAGE);
                    ptf.osvjeziTabelu();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti trenera!", "GRESKA", JOptionPane.ERROR_MESSAGE);
                    JOptionPane.showMessageDialog(this, "Neispravan format unosa: " + validanFormat, "GRESKA", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                if (ex instanceof IOException) {
                    JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                } else {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "GREšKA", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Sistem ne može da zapamti trenera!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Morate da popunite polja: " + validan, "GRESKA", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jButtonSacuvajIzmjeneActionPerformed

    private void jButtonOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOdustaniActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonOdustaniActionPerformed

    private void jButtonObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonObrisiActionPerformed
        String ime = jTextFieldIme.getText();
        String prezime = jTextFieldPrezime.getText();
        String jmbg = jTextFieldJMBG.getText();
        String godineIskustvaString = jTextFieldIskustvo.getText();
        try {
            int godineIskustvaInt = Integer.parseInt(godineIskustvaString);
            Trener trenerBrisanje = new Trener(trenerIzmjena.getTrenerId(), ime, prezime, jmbg, godineIskustvaInt);
            int obrisanTrener = Klijent.getInstance().obrisiTrenera(trenerBrisanje);
            JOptionPane.showMessageDialog(this, "Sistem je obrisao trenera!", "Trener obrisan", JOptionPane.INFORMATION_MESSAGE);
            ptf.osvjeziTabelu();
            this.dispose();
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            } else {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "GREšKA", JOptionPane.ERROR_MESSAGE);
                this.dispose();
            }
        }

    }//GEN-LAST:event_jButtonObrisiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDodaj;
    private javax.swing.JButton jButtonObrisi;
    private javax.swing.JButton jButtonOdustani;
    private javax.swing.JButton jButtonPonisti;
    private javax.swing.JButton jButtonSacuvajIzmjene;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelBrisanje;
    private javax.swing.JTextField jTextFieldIme;
    private javax.swing.JTextField jTextFieldIskustvo;
    private javax.swing.JTextField jTextFieldJMBG;
    private javax.swing.JTextField jTextFieldPrezime;
    // End of variables declaration//GEN-END:variables

    private String validacija(String ime, String prezime, String jmbg, String godineIskustva) {
        String validan = "";
        if (ime.equals("")) {
            validan += "Ime | ";
        }
        if (prezime.equals("")) {
            validan += "Prezime | ";
        }
        if (jmbg.equals("")) {
            validan += "JMBG | ";
        }
        if (godineIskustva.equals("")) {
            validan += "Godine iskustva | ";
        }
        return validan;
    }

    private void prikaz(Prikaz nacinPrikaza, Trener trenerIzmjena) {
        if (nacinPrikaza == Prikaz.DODAJ_FORMA) {
            jLabelBrisanje.setVisible(false);
            jButtonObrisi.setVisible(false);
            jButtonOdustani.setVisible(false);
            jButtonDodaj.setVisible(true);
            jButtonSacuvajIzmjene.setVisible(false);
            this.setTitle("Unos podataka o treneru");
        } else if (nacinPrikaza == Prikaz.IZMJENI_FORMA) {
            jLabelBrisanje.setVisible(false);
            jButtonObrisi.setVisible(false);
            jButtonOdustani.setVisible(false);
            jButtonDodaj.setVisible(false);
            jButtonSacuvajIzmjene.setVisible(true);
            jTextFieldIme.setText(trenerIzmjena.getIme());
            jTextFieldPrezime.setText(trenerIzmjena.getPrezime());
            jTextFieldJMBG.setText(trenerIzmjena.getJmbg());
            jTextFieldIskustvo.setText(String.valueOf(trenerIzmjena.getGodineIskustva()));
            this.setTitle("Izmjena podataka o treneru");
            jTextFieldJMBG.setEnabled(false);
        } else if (nacinPrikaza == Prikaz.OBRISI_FORMA) {
            jTextFieldJMBG.setEnabled(false);
            jLabelBrisanje.setVisible(true);
            jButtonDodaj.setVisible(false);
            jButtonPonisti.setVisible(false);
            jButtonSacuvajIzmjene.setVisible(false);
            jButtonObrisi.setVisible(true);
            jButtonOdustani.setVisible(true);
            jTextFieldIme.setEditable(false);
            jTextFieldPrezime.setEditable(false);
            jTextFieldJMBG.setEditable(false);
            jTextFieldIskustvo.setEditable(false);
            jTextFieldIme.setText(trenerIzmjena.getIme());
            jTextFieldPrezime.setText(trenerIzmjena.getPrezime());
            jTextFieldJMBG.setText(trenerIzmjena.getJmbg());
            jTextFieldIskustvo.setText(String.valueOf(trenerIzmjena.getGodineIskustva()));
            this.setTitle("Potvrda brisanja trenera");
        }
    }

    private String validirajFormat(String ime, String prezime, String jmbg, String godineIskustvaString) {
        String validanFormat = "";
        if (!ime.matches("[a-zA-Z]+") || !Character.isUpperCase(ime.charAt(0))) {
            validanFormat += "Ime | ";
        }
        if (!prezime.matches("[a-zA-Z]+") || !Character.isUpperCase(prezime.charAt(0))) {
            validanFormat += "Prezime | ";
        }
        if (!jmbg.matches("\\d+")) {
            validanFormat += "JMBG mora da sadrži samo cifre | ";
        }
        if (jmbg.length() != 13) {
            validanFormat += "JMBG mora da sadrži tačno 13 cifara | ";
        }
        if (!godineIskustvaString.matches("\\d+")) {
            validanFormat += "Godine iskustva | ";
        }
        return validanFormat;
    }

    private void ponovniUnos() {
        jTextFieldIme.setText("");
        jTextFieldPrezime.setText("");
        jTextFieldJMBG.setText("");
        jTextFieldIskustvo.setText("");
    }
}
