/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.ac.bg.fon.ai.skolafudbala.forme;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import rs.ac.bg.fon.ai.skolafudbala.enums.Pozicija;
import rs.ac.bg.fon.ai.skolafudbala.klijent.Klijent;
import rs.ac.bg.fon.ai.skolafudbala.model.Fudbaler;
import rs.ac.bg.fon.ai.skolafudbala.model.StatistikaFudbalera;
import rs.ac.bg.fon.ai.skolafudbala.model.TreningGrupa;
import rs.ac.bg.fon.ai.skolafudbala.model.TreningUtakmica;
import rs.ac.bg.fon.ai.skolafudbala.modelitabele.ModelTabeleStatistika;
import rs.ac.bg.fon.ai.skolafudbala.modelitabele.ModelTabeleTreningUtakmica;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Korisnik
 */
public class UnosTreningUtakmiceForma extends javax.swing.JDialog {

    private StatistikaFudbalera stat;
    private List<TreningGrupa> listaTreningGrupa = new ArrayList<>();
    private List<StatistikaFudbalera> listaStatistika = new ArrayList<>();
    List<Fudbaler> listaSelektovanihFudbalera = new ArrayList<>();
    private SimpleDateFormat formater = new SimpleDateFormat("dd-MM-yyyy");
    private Fudbaler igrac;
    private String validan;
    private int brAsistenIgracMarkirani = 0;
    private int brAsistenIgracNeMarkirani = 0;
    private int brGolovaIgracMarkirani = 0;
    private int brGolovaIgracNeMarkirani = 0;
    private int brPrimljenGolmanMarkirani = 0;
    private int brPrimljenGolmanNemarkirani = 0;
    private int goloviMarkirani = 0;
    private int goloviNemarkirani = 0;
    private TreningGrupa markirani = new TreningGrupa();
    private TreningGrupa neMarkirani = new TreningGrupa();
    private ModelTabeleStatistika mts;

    /**
     * Creates new form UnosTreningUtakmiceForma
     */
    public UnosTreningUtakmiceForma(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        try {
            popuniComboTreningGrupa();
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        }
        jLabelBrojOdbrana.setVisible(false);
        jTextFieldBrojOdbrana.setVisible(false);
        jTextFieldPrimljeni.setVisible(false);
        jLabelPrimljeni.setVisible(false);
        jTableTreningUtakmice.setEnabled(false);
        onemoguciPolja();
        try {
            popuniTabeluTreningUtakmica();
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        }
        jButtonSacuvaj.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldRedniBroj = new javax.swing.JTextField();
        jTextFieldDatum = new javax.swing.JTextField();
        jComboBoxMarkirani = new javax.swing.JComboBox<>();
        jComboBoxNemarkirani = new javax.swing.JComboBox<>();
        jButtonUcitajFudbalere = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButtonDodajStatistiku = new javax.swing.JButton();
        jTextFieldGolovi = new javax.swing.JTextField();
        jTextFieldAsistencije = new javax.swing.JTextField();
        jTextFieldBrojOdbrana = new javax.swing.JTextField();
        jComboBoxIgrac = new javax.swing.JComboBox<>();
        jTextFieldMinuti = new javax.swing.JTextField();
        jTextFieldPromaseniSutevi = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabelBrojOdbrana = new javax.swing.JLabel();
        jLabelPrimljeni = new javax.swing.JLabel();
        jTextFieldPrimljeni = new javax.swing.JTextField();
        jTextFieldOcjena = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBoxIgracPrvaPostava = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableStatistika = new javax.swing.JTable();
        jLabelGoloviMarkirani = new javax.swing.JLabel();
        jLabelGoloviNemarkirani = new javax.swing.JLabel();
        jTextFieldGolMarkirani = new javax.swing.JTextField();
        jTextFieldGolNemarkirani = new javax.swing.JTextField();
        jButtonSacuvaj = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTreningUtakmice = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jButtonPonisti = new javax.swing.JButton();
        jButtonIzmjeni = new javax.swing.JButton();
        jLabelGoloviMarkeri = new javax.swing.JLabel();
        jLabelGoloviMarkeri2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Redni broj trening utakmice:");

        jLabel2.setText("Datum:");

        jLabel3.setText("Trening grupa(markirani):");

        jLabel4.setText("Trening grupa(nemarkirani):");

        jTextFieldDatum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldDatumActionPerformed(evt);
            }
        });

        jButtonUcitajFudbalere.setText("Ucitaj fudbalere za trening grupe");
        jButtonUcitajFudbalere.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUcitajFudbalereActionPerformed(evt);
            }
        });

        jLabel8.setText("Igrač:");

        jButtonDodajStatistiku.setText("Dodaj statistiku");
        jButtonDodajStatistiku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDodajStatistikuActionPerformed(evt);
            }
        });

        jComboBoxIgrac.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBoxIgracMouseClicked(evt);
            }
        });
        jComboBoxIgrac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxIgracActionPerformed(evt);
            }
        });

        jTextFieldMinuti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldMinutiActionPerformed(evt);
            }
        });

        jLabel13.setText("Broj golova:");

        jLabel14.setText("Broj asistencija:");

        jLabel15.setText("Broj promašenih šuteva:");

        jLabel16.setText("Provedeni minuti:");

        jLabel17.setText("Prva postava:");

        jLabelBrojOdbrana.setText("Broj odbrana:");

        jLabelPrimljeni.setText("Broj primljenih golova:");

        jLabel6.setText("Ocjena:");

        jComboBoxIgracPrvaPostava.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DA", "NE" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxIgracPrvaPostava, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldPromaseniSutevi, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonDodajStatistiku, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldGolovi, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldAsistencije, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldMinuti, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelPrimljeni, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jTextFieldPrimljeni, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelBrojOdbrana, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldOcjena, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldBrojOdbrana, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jComboBoxIgrac, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(73, 73, 73))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBoxIgrac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldGolovi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabelBrojOdbrana)
                    .addComponent(jTextFieldBrojOdbrana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAsistencije, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldOcjena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldMinuti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabelPrimljeni)
                    .addComponent(jTextFieldPrimljeni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldPromaseniSutevi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxIgracPrvaPostava, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jButtonDodajStatistiku))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jTableStatistika.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableStatistika);

        jLabelGoloviMarkirani.setText("Broj golova");

        jLabelGoloviNemarkirani.setText("Broj golova");

        jButtonSacuvaj.setText("Sačuvaj trening utakmicu");
        jButtonSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSacuvajActionPerformed(evt);
            }
        });

        jLabel12.setText("Statistika fudbalera:");

        jLabel5.setText("Statistika fudbalera:");

        jTableTreningUtakmice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTableTreningUtakmice);

        jLabel7.setText("Trening utakmice:");

        jButtonPonisti.setText("Poništi");
        jButtonPonisti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPonistiActionPerformed(evt);
            }
        });

        jButtonIzmjeni.setText("Izmjeni");
        jButtonIzmjeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIzmjeniActionPerformed(evt);
            }
        });

        jLabelGoloviMarkeri.setText("(markirani):");

        jLabelGoloviMarkeri2.setText("(nemarkirani):");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonUcitajFudbalere, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextFieldRedniBroj, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxMarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxNemarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 524, Short.MAX_VALUE))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(870, 870, 870)
                                .addComponent(jButtonIzmjeni, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabelGoloviMarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabelGoloviMarkeri, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextFieldGolMarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabelGoloviNemarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabelGoloviMarkeri2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTextFieldGolNemarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(362, 362, 362)
                .addComponent(jButtonSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(97, 97, 97)
                .addComponent(jButtonPonisti, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldRedniBroj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTextFieldDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBoxMarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBoxNemarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButtonUcitajFudbalere)
                        .addGap(44, 44, 44)
                        .addComponent(jLabel5)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jButtonIzmjeni, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldGolMarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGoloviNemarkirani)
                    .addComponent(jTextFieldGolNemarkirani, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGoloviMarkirani)
                    .addComponent(jLabelGoloviMarkeri)
                    .addComponent(jLabelGoloviMarkeri2))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonPonisti)
                    .addComponent(jButtonSacuvaj, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldDatumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldDatumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldDatumActionPerformed

    private void jButtonUcitajFudbalereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUcitajFudbalereActionPerformed
        try {
            if (jComboBoxMarkirani.getSelectedIndex() != -1 && jComboBoxNemarkirani.getSelectedIndex() != -1) {
                markirani = (TreningGrupa) jComboBoxMarkirani.getSelectedItem();
                neMarkirani = (TreningGrupa) jComboBoxNemarkirani.getSelectedItem();
                if (markirani.equals(neMarkirani)) {
                    JOptionPane.showMessageDialog(this, "Ne možete da odaberete dvije iste trening grupe!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                } else {
                    List<Fudbaler> listaFudbalera = new ArrayList<>();
                    jLabelGoloviMarkeri.setText("(" + markirani.getNazivGrupe() + "):");
                    jLabelGoloviMarkeri2.setText("(" + neMarkirani.getNazivGrupe() + "):");
                    List<Fudbaler> listaFudbaleraMark = new ArrayList<>();
                    List<Fudbaler> listaFudbaleraNeMark = new ArrayList<>();
                    listaFudbalera = Klijent.getInstance().ucitajListuFudbalera();
                    for (Fudbaler f : listaFudbalera) {
                        if (f.getTreningGrupa().getObjID() == markirani.getObjID() || f.getTreningGrupa().getObjID() == neMarkirani.getObjID()) {
                            listaSelektovanihFudbalera.add(f);
                        }
                    }
                    for (Fudbaler fr : listaSelektovanihFudbalera) {
                        if (fr.getTreningGrupa().getObjID() == markirani.getObjID()) {
                            listaFudbaleraMark.add(fr);
                        }
                        if (fr.getTreningGrupa().getObjID() == neMarkirani.getObjID()) {
                            listaFudbaleraNeMark.add(fr);
                        }
                    }
                    if (listaFudbaleraMark.size() == 0 || listaFudbaleraNeMark.size() == 0) {
                        JOptionPane.showMessageDialog(this, "Neka od izabranih trening grupa trenutno ne sadrzi nijednog fudbalera!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                        listaSelektovanihFudbalera = new ArrayList<>();
                        onemoguciPolja();
                    } else {
                        omoguci();
                        jComboBoxMarkirani.setEnabled(false);
                        jComboBoxNemarkirani.setEnabled(false);
                        jButtonUcitajFudbalere.setEnabled(false);
                    }
                    popuniComboFudbaleri(listaSelektovanihFudbalera);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Morate da izaberete vrijednost za obje trening grupe!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            } else {
                Logger.getLogger(UnosTreningUtakmiceForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonUcitajFudbalereActionPerformed

    private void jButtonDodajStatistikuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDodajStatistikuActionPerformed

        igrac = (Fudbaler) jComboBoxIgrac.getSelectedItem();
        boolean prvaPostavaBool;
        String brGolovaString = jTextFieldGolovi.getText();
        String brAsistencijeString = jTextFieldAsistencije.getText();
        String brojPromasenihString = jTextFieldPromaseniSutevi.getText();
        String provedeniMinutiString = jTextFieldMinuti.getText();
        String prvaPostava = (String) jComboBoxIgracPrvaPostava.getSelectedItem();
        String brojOdbranaString = jTextFieldBrojOdbrana.getText();
        String brojPrimljenihGolovaString = jTextFieldPrimljeni.getText();
        String ocjenaString = jTextFieldOcjena.getText();
        validan = validiraj(igrac, brGolovaString, brAsistencijeString, brojPromasenihString, provedeniMinutiString, brojOdbranaString, brojPrimljenihGolovaString, ocjenaString);
        if (validan.equals("")) {
            String validanFormat = validanFormatStat(igrac, brGolovaString, brAsistencijeString, brojPromasenihString, provedeniMinutiString, brojOdbranaString, brojPrimljenihGolovaString, ocjenaString);
            if (validanFormat.equals("")) {
                if (listaSelektovanihFudbalera.size() == 1) {
                    jButtonSacuvaj.setEnabled(true);
                    JOptionPane.showMessageDialog(this, "Unijeli ste statistike za sve fudbalere!", "Unijete statistike", JOptionPane.INFORMATION_MESSAGE);
                    onemoguciPolja();
                }
                int brGolova = Integer.parseInt(brGolovaString);
                int brAsistencija = Integer.parseInt(brAsistencijeString);
                int provedeniMinuti = Integer.parseInt(provedeniMinutiString);
                int brojPromasenih = Integer.parseInt(brojPromasenihString);
                double ocjena = Double.parseDouble(ocjenaString);
                if (prvaPostava.equals("DA")) {
                    prvaPostavaBool = true;
                } else {
                    prvaPostavaBool = false;
                }
                if (!brojOdbranaString.equals("") && !brojPrimljenihGolovaString.equals("")) {
                    int brojOdbrana = Integer.parseInt(brojOdbranaString);
                    int brojPrimljenihGolova = Integer.parseInt(brojPrimljenihGolovaString);
                    stat = new StatistikaFudbalera(igrac, null, brGolova, brAsistencija, brojPromasenih, provedeniMinuti, prvaPostavaBool, brojOdbrana, brojPrimljenihGolova, ocjena);
                    if (igrac.getTreningGrupa().equals(markirani)) {
                        brPrimljenGolmanMarkirani += brojPrimljenihGolova;
                        brGolovaIgracMarkirani += brGolova;
                        brAsistenIgracMarkirani += brAsistencija;
                    } else {
                        brPrimljenGolmanNemarkirani += brojPrimljenihGolova;
                        brGolovaIgracNeMarkirani += brGolova;
                        brAsistenIgracNeMarkirani += brAsistencija;
                    }
                }
                if (!brojOdbranaString.equals("") && brojPrimljenihGolovaString.equals("")) {
                    int brojOdbrana = Integer.parseInt(brojOdbranaString);
                    stat = new StatistikaFudbalera(igrac, null, brGolova, brAsistencija, brojPromasenih, provedeniMinuti, prvaPostavaBool, brojOdbrana, 0, ocjena);
                    if (igrac.getTreningGrupa().equals(markirani)) {
                        brGolovaIgracMarkirani += brGolova;
                        brAsistenIgracMarkirani += brAsistencija;
                    } else {
                        brGolovaIgracNeMarkirani += brGolova;
                        brAsistenIgracNeMarkirani += brAsistencija;
                    }
                }
                if (brojOdbranaString.equals("") && brojPrimljenihGolovaString.equals("")) {
                    if (igrac.getTreningGrupa().equals(markirani)) {
                        brGolovaIgracMarkirani += brGolova;
                        brAsistenIgracMarkirani += brAsistencija;
                    } else {
                        brGolovaIgracNeMarkirani += brGolova;
                        brAsistenIgracNeMarkirani += brAsistencija;
                    }
                    stat = new StatistikaFudbalera(igrac, null, brGolova, brAsistencija, brojPromasenih, provedeniMinuti, prvaPostavaBool, 0, 0, ocjena);
                }
                listaSelektovanihFudbalera.remove(igrac);
                jComboBoxIgrac.removeItem(igrac);
                isprazniPolja();
                listaStatistika.add(stat);
                mts = new ModelTabeleStatistika(listaStatistika);
                jTableStatistika.setModel(mts);
            } else {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti trening utakmicu!", "GRESKA", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Neispravan format unosa: " + validanFormat, "GRESKA", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Morate da popunite polja: " + validan, "GREŠKA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonDodajStatistikuActionPerformed

    private void jButtonSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSacuvajActionPerformed
        String redniBrStr = jTextFieldRedniBroj.getText();
        String datumString = jTextFieldDatum.getText();
        TreningGrupa markirani = (TreningGrupa) jComboBoxMarkirani.getSelectedItem();
        TreningGrupa neMarkirani = (TreningGrupa) jComboBoxNemarkirani.getSelectedItem();
        String brTim1Str = jTextFieldGolMarkirani.getText();
        String brTim2Str = jTextFieldGolNemarkirani.getText();
        String validan = validacija(redniBrStr, datumString, brTim1Str, brTim2Str);
        if (validan.equals("")) {
            Date datum = null;
            try {
                datum = formater.parse(datumString);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Niste unijeli datum u ispravnom formatu! Ispravan format: (dd-MM-yyyy)", "GREŠKA", JOptionPane.ERROR_MESSAGE);
            }
            String validanFormat = validirajFormatUtakmica(redniBrStr, datum, brTim1Str, brTim2Str);
            if (validanFormat.equals("")) {
                try {
                    int brTim1 = Integer.parseInt(brTim1Str);
                    int brTim2 = Integer.parseInt(brTim2Str);
                    int redniBr = Integer.parseInt(redniBrStr);

                    TreningUtakmica tu = new TreningUtakmica(redniBr, datum, brTim1, brTim2, markirani, neMarkirani, listaStatistika);
                    long potvrdaUnosa = Klijent.getInstance().zapamtiTreningUtakmicu(tu);
                    JOptionPane.showMessageDialog(this, "Uspjesno ste unijeli trening utakmicu!", "Potvrda unosa", JOptionPane.INFORMATION_MESSAGE);
                    popuniTabeluTreningUtakmica();
                    ponovniUnos();
                    osvjeziStatistiku();
                    jButtonSacuvaj.setEnabled(false);
                } catch (Exception ex) {
                    if (ex instanceof IOException) {
                        JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                        System.exit(0);
                    } else {
                        JOptionPane.showMessageDialog(this, ex.getMessage(), "GREŠKA", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti trening utakmicu!", "GRESKA", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Neispravan format unosa: " + validanFormat, "GRESKA", JOptionPane.ERROR_MESSAGE);
                jButtonIzmjeni.setEnabled(true);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Morate da popunite polja: " + validan, "GREŠKA", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_jButtonSacuvajActionPerformed

    private void jComboBoxIgracMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxIgracMouseClicked

    }//GEN-LAST:event_jComboBoxIgracMouseClicked

    private void jTextFieldMinutiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldMinutiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldMinutiActionPerformed

    private void jButtonPonistiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPonistiActionPerformed
        ponovniUnos();
    }//GEN-LAST:event_jButtonPonistiActionPerformed

    private void jButtonIzmjeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIzmjeniActionPerformed
        int selektovaniRed = jTableStatistika.getSelectedRow();
        if (selektovaniRed == -1) {
            JOptionPane.showMessageDialog(this, "Morate selektovati red u tabeli statistike!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
        } else {
            StatistikaFudbalera sf = mts.get(selektovaniRed);
            listaStatistika.remove(sf);
            mts = new ModelTabeleStatistika(listaStatistika);
            jTableStatistika.setModel(mts);
            System.out.println(sf.getFudbaler().getTreningGrupa() + "=" + markirani);
            if (sf.getFudbaler().getTreningGrupa().equals(markirani)) {
                brGolovaIgracMarkirani -= sf.getBrojGolova();
                brAsistenIgracMarkirani -= sf.getBrojAsistencija();
                brPrimljenGolmanMarkirani -= sf.getBrojPrimljenihGolova();
            } else {
                brGolovaIgracNeMarkirani -= sf.getBrojGolova();
                brAsistenIgracNeMarkirani -= sf.getBrojAsistencija();
                brPrimljenGolmanNemarkirani -= sf.getBrojPrimljenihGolova();
            }
            omoguci();
            jTextFieldGolovi.setText(String.valueOf(sf.getBrojGolova()));
            jTextFieldAsistencije.setText(String.valueOf(sf.getBrojAsistencija()));
            jTextFieldPromaseniSutevi.setText(String.valueOf(sf.getBrojPromasenihSuteva()));
            jTextFieldMinuti.setText(String.valueOf(sf.getBrojProvedenihMinuta()));
            jTextFieldBrojOdbrana.setText(String.valueOf(sf.getBrojOdbrana()));
            jTextFieldPrimljeni.setText(String.valueOf(sf.getBrojPrimljenihGolova()));
            jTextFieldOcjena.setText(String.valueOf(sf.getOcjena()));
            listaSelektovanihFudbalera.add(sf.getFudbaler());
            popuniComboFudbaleri(listaSelektovanihFudbalera);
            jComboBoxIgrac.setSelectedItem(sf.getFudbaler());
        }
    }//GEN-LAST:event_jButtonIzmjeniActionPerformed

    private void jComboBoxIgracActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxIgracActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxIgracActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDodajStatistiku;
    private javax.swing.JButton jButtonIzmjeni;
    private javax.swing.JButton jButtonPonisti;
    private javax.swing.JButton jButtonSacuvaj;
    private javax.swing.JButton jButtonUcitajFudbalere;
    private javax.swing.JComboBox<Fudbaler> jComboBoxIgrac;
    private javax.swing.JComboBox<String> jComboBoxIgracPrvaPostava;
    private javax.swing.JComboBox<TreningGrupa> jComboBoxMarkirani;
    private javax.swing.JComboBox<TreningGrupa> jComboBoxNemarkirani;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelBrojOdbrana;
    private javax.swing.JLabel jLabelGoloviMarkeri;
    private javax.swing.JLabel jLabelGoloviMarkeri2;
    private javax.swing.JLabel jLabelGoloviMarkirani;
    private javax.swing.JLabel jLabelGoloviNemarkirani;
    private javax.swing.JLabel jLabelPrimljeni;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableStatistika;
    private javax.swing.JTable jTableTreningUtakmice;
    private javax.swing.JTextField jTextFieldAsistencije;
    private javax.swing.JTextField jTextFieldBrojOdbrana;
    private javax.swing.JTextField jTextFieldDatum;
    private javax.swing.JTextField jTextFieldGolMarkirani;
    private javax.swing.JTextField jTextFieldGolNemarkirani;
    private javax.swing.JTextField jTextFieldGolovi;
    private javax.swing.JTextField jTextFieldMinuti;
    private javax.swing.JTextField jTextFieldOcjena;
    private javax.swing.JTextField jTextFieldPrimljeni;
    private javax.swing.JTextField jTextFieldPromaseniSutevi;
    private javax.swing.JTextField jTextFieldRedniBroj;
    // End of variables declaration//GEN-END:variables

    private void popuniComboTreningGrupa() throws Exception {

        listaTreningGrupa = Klijent.getInstance().ucitajListuTreningGrupe();
        for (TreningGrupa tg : listaTreningGrupa) {
            jComboBoxMarkirani.addItem(tg);
            jComboBoxNemarkirani.addItem(tg);
        }
        jComboBoxMarkirani.setSelectedIndex(-1);
        jComboBoxNemarkirani.setSelectedIndex(-1);

    }

    private void popuniComboFudbaleri(List<Fudbaler> listaSelektovanihFudbalera) {
        jComboBoxIgrac.removeAllItems();
        for (Fudbaler f : listaSelektovanihFudbalera) {
            jComboBoxIgrac.addItem(f);
        }
        jComboBoxIgrac.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                Fudbaler item = (Fudbaler) jComboBoxIgrac.getSelectedItem();
                if (item != null) {
                    if (item.getPozicija().equals(String.valueOf(Pozicija.GOLMAN))) {
                        jLabelBrojOdbrana.setVisible(true);
                        jTextFieldBrojOdbrana.setVisible(true);
                        jTextFieldPrimljeni.setVisible(true);
                        jLabelPrimljeni.setVisible(true);
                    } else if (item.getPozicija().equals(String.valueOf(Pozicija.BEK)) || item.getPozicija().equals(String.valueOf(Pozicija.STOPER))) {
                        jLabelBrojOdbrana.setVisible(true);
                        jTextFieldBrojOdbrana.setVisible(true);
                        jTextFieldPrimljeni.setVisible(false);
                        jLabelPrimljeni.setVisible(false);
                    } else {
                        jLabelBrojOdbrana.setVisible(false);
                        jTextFieldBrojOdbrana.setVisible(false);
                        jTextFieldPrimljeni.setVisible(false);
                        jLabelPrimljeni.setVisible(false);
                    }
                }
            }
        });
    }

    private String validacija(String redniBrStr, String datumString, String brTim1Str, String brTim2Str) {
        String poruka = "";
        if (redniBrStr.equals("")) {
            poruka += "Redni broj | ";
        }
        if (datumString.equals("")) {
            poruka += "Datum | ";
        }
        if (brTim1Str.equals("")) {
            poruka += "Broj golova(markirani) | ";
        }
        if (brTim2Str.equals("")) {
            poruka += "Broj golova(nemarkirani) | ";
        }
        return poruka;
    }

    private String validiraj(Fudbaler igrac, String brGolovaString, String brAsistencijeString, String brojPromasenihString, String provedeniMinutiString, String brojOdbranaString, String brojPrimljenihGolovaString, String ocjenaString) {
        String poruka = "";
        if (igrac.getPozicija().equals(String.valueOf(Pozicija.GOLMAN))) {
            if (brGolovaString.equals("")) {
                poruka += "Broj golova | ";
            }
            if (brAsistencijeString.equals("")) {
                poruka += "Broj asistencija | ";
            }
            if (brojPromasenihString.equals("")) {
                poruka += "Broj promašenih šuteva | ";
            }
            if (provedeniMinutiString.equals("")) {
                poruka += "Provedeni minuti | ";
            }
            if (brojOdbranaString.equals("")) {
                poruka += "Broj odbrana | ";
            }
            if (brojPrimljenihGolovaString.equals("")) {
                poruka += "Broj primljenih golova | ";
            }
            if (ocjenaString.equals("")) {
                poruka += "Ocjena | ";
            }
        } else if (igrac.getPozicija().equals(String.valueOf(Pozicija.BEK)) || igrac.getPozicija().equals(String.valueOf(Pozicija.STOPER))) {
            if (brGolovaString.equals("")) {
                poruka += "Broj golova | ";
            }
            if (brAsistencijeString.equals("")) {
                poruka += "Broj asistencija | ";
            }
            if (brojPromasenihString.equals("")) {
                poruka += "Broj promašenih šuteva | ";
            }
            if (provedeniMinutiString.equals("")) {
                poruka += "Provedeni minuti | ";
            }
            if (brojOdbranaString.equals("")) {
                poruka += "Broj odbrana | ";
            }
            if (ocjenaString.equals("")) {
                poruka += "Ocjena | ";
            }
        } else {
            if (brGolovaString.equals("")) {
                poruka += "Broj golova | ";
            }
            if (brAsistencijeString.equals("")) {
                poruka += "Broj asistencija | ";
            }
            if (brojPromasenihString.equals("")) {
                poruka += "Broj promašenih šuteva | ";
            }
            if (provedeniMinutiString.equals("")) {
                poruka += "Provedeni minuti | ";
            }
            if (ocjenaString.equals("")) {
                poruka += "Ocjena | ";
            }
        }
        return poruka;
    }

    private void isprazniPolja() {
        jTextFieldGolovi.setText("");
        jTextFieldMinuti.setText("");
        jTextFieldAsistencije.setText("");
        jTextFieldPromaseniSutevi.setText("");
        jTextFieldMinuti.setText("");
        jComboBoxIgracPrvaPostava.setSelectedIndex(0);
        jTextFieldBrojOdbrana.setText("");
        jTextFieldPrimljeni.setText("");
        jTextFieldOcjena.setText("");
    }

    private void onemoguciPolja() {
        jButtonDodajStatistiku.setEnabled(false);
        jComboBoxIgrac.setEnabled(false);
        jPanel1.setEnabled(false);
        jTextFieldGolovi.setEditable(false);
        jTextFieldMinuti.setEditable(false);
        jTextFieldAsistencije.setEditable(false);
        jTextFieldPromaseniSutevi.setEditable(false);
        jTextFieldMinuti.setEditable(false);
        jComboBoxIgracPrvaPostava.setEnabled(false);
        jTextFieldBrojOdbrana.setEditable(false);
        jTextFieldPrimljeni.setEditable(false);
        jTextFieldOcjena.setEditable(false);
    }

    private void omoguci() {
        jButtonDodajStatistiku.setEnabled(true);
        jComboBoxIgrac.setEnabled(true);
        jPanel1.setEnabled(true);
        jTextFieldGolovi.setEditable(true);
        jTextFieldMinuti.setEditable(true);
        jTextFieldAsistencije.setEditable(true);
        jTextFieldPromaseniSutevi.setEditable(true);
        jTextFieldMinuti.setEditable(true);
        jComboBoxIgracPrvaPostava.setEnabled(true);
        jTextFieldBrojOdbrana.setEditable(true);
        jTextFieldPrimljeni.setEditable(true);
        jTextFieldOcjena.setEditable(true);
    }

    private void popuniTabeluTreningUtakmica() throws Exception {
        List<TreningUtakmica> listaTreningUtakmica = new ArrayList<>();

        listaTreningUtakmica = Klijent.getInstance().ucitajListuTreningUtakmica();

        ModelTabeleTreningUtakmica mttu = new ModelTabeleTreningUtakmica(listaTreningUtakmica);
        jTableTreningUtakmice.setModel(mttu);
    }

    private String validanFormatStat(Fudbaler igrac, String brGolovaString, String brAsistencijeString, String brojPromasenihString, String provedeniMinutiString, String brojOdbranaString, String brojPrimljenihGolovaString, String ocjenaString) {
        String validanFormat = "";
        if (igrac.getPozicija().equals(String.valueOf(Pozicija.GOLMAN))) {
            validanFormat = "";
            if (!brGolovaString.matches("\\d+")) {
                validanFormat += "Broj golova | ";
            }
            if (!brAsistencijeString.matches("\\d+")) {
                validanFormat += "Broj asistencija | ";
            }
            if (!brojPromasenihString.matches("\\d+")) {
                validanFormat += "Broj promašenih šuteva | ";
            }
            if (!provedeniMinutiString.matches("\\d+")) {
                validanFormat += "Provedeni minuti | ";
            } else {
                int provedeniMin = Integer.parseInt(provedeniMinutiString);
                if (provedeniMin < 0 || provedeniMin > 90) {
                    validanFormat += "Provedene minute unijeti u intervalu [0,90] |";
                }
            }
            if (!brojOdbranaString.matches("\\d+")) {
                validanFormat += "Broj odbrana | ";
            }
            if (!brojPrimljenihGolovaString.matches("\\d+")) {
                validanFormat += "Broj primljenih golova | ";
            }
            if (!ocjenaString.matches("[0-9.]+")) {
                validanFormat += "Ocjena | ";
            } else {
                double ocjena = Double.parseDouble(ocjenaString);
                if (ocjena < 5 || ocjena > 10) {
                    validanFormat += "Ocjena mora da bude u intervalu [5,10] | ";
                }
            }
        } else if (igrac.getPozicija().equals(String.valueOf(Pozicija.BEK)) || igrac.getPozicija().equals(String.valueOf(Pozicija.STOPER))) {
            validanFormat = "";
            if (!brGolovaString.matches("\\d+")) {
                validanFormat += "Broj golova | ";
            }
            if (!brAsistencijeString.matches("\\d+")) {
                validanFormat += "Broj asistencija | ";
            }
            if (!brojPromasenihString.matches("\\d+")) {
                validanFormat += "Broj promašenih šuteva | ";
            }
            if (!provedeniMinutiString.matches("\\d+")) {
                validanFormat += "Provedeni minuti | ";
            }
            if (!brojOdbranaString.matches("\\d+")) {
                validanFormat += "Broj odbrana | ";
            }
            if (!ocjenaString.matches("[0-9.]+")) {
                validanFormat += "Ocjena | ";
            } else {
                double ocjena = Double.parseDouble(ocjenaString);
                if (ocjena < 5 || ocjena > 10) {
                    validanFormat += "Ocjena mora da bude u intervalu [5,10] | ";
                }
            }
        } else {
            validanFormat = "";
            if (!brGolovaString.matches("\\d+")) {
                validanFormat += "Broj golova | ";
            }
            if (!brAsistencijeString.matches("\\d+")) {
                validanFormat += "Broj asistencija | ";
            }
            if (!brojPromasenihString.matches("\\d+")) {
                validanFormat += "Broj promašenih šuteva | ";
            }
            if (!provedeniMinutiString.matches("\\d+")) {
                validanFormat += "Provedeni minuti | ";
            }
            if (!ocjenaString.matches("[0-9.]+")) {
                validanFormat += "Ocjena | ";
            } else {
                double ocjena = Double.parseDouble(ocjenaString);
                if (ocjena < 5 || ocjena > 10) {
                    validanFormat += "Ocjena mora da bude u intervalu [5,10] | ";
                }
            }
        }
        return validanFormat;
    }

    private void ponovniUnos() {
        jLabelGoloviMarkeri.setText("(markirani):");
        jLabelGoloviMarkeri2.setText("(nemarkirani):");
        jTextFieldGolMarkirani.setText("");
        jTextFieldGolNemarkirani.setText("");
        listaStatistika = new ArrayList<>();
        ModelTabeleStatistika mts1 = new ModelTabeleStatistika(listaStatistika);
        jTableStatistika.setModel(mts1);
        isprazniPolja();
        onemoguciPolja();
        jComboBoxMarkirani.setEnabled(true);
        jComboBoxNemarkirani.setEnabled(true);
        jButtonUcitajFudbalere.setEnabled(true);
        jTextFieldRedniBroj.setText("");
        jTextFieldDatum.setText("");
        jComboBoxMarkirani.setSelectedIndex(-1);
        jComboBoxNemarkirani.setSelectedIndex(-1);

    }

    private String validirajFormatUtakmica(String redniBrStr, Date datum, String brTim1Str, String brTim2Str) {
        String poruka = "";
        if (!redniBrStr.matches("\\d+")) {
            poruka += "Redni broj mora da sadrzi samo cifre | ";
        }
        if (datum.after(new Date())) {
            poruka += "Datum mora biti iz prošlosti | ";
        }
        if (!brTim1Str.matches("\\d+")) {
            poruka += "Broj golova(markirani) | ";
        } else {
            int brTim1 = Integer.parseInt(brTim1Str);
            if (brTim1 != brGolovaIgracMarkirani) {
                poruka += "Broj golova(markirani) nije u skladu sa ukupnim zbirom postignutih golova igrača ove ekipe | ";
            }
            if (brTim1 != brAsistenIgracMarkirani) {
                poruka += "Broj golova(markirani) nije u skladu sa ukupnim zbirom asistencija igrača ove ekipe | ";
            }
            if (brTim1 != brPrimljenGolmanNemarkirani) {
                poruka += "Broj golova(markirani) nije u skladu sa ukupnim zbirom primljenih golova golmana ove ekipe | ";
            }

        }

        if (!brTim2Str.matches("\\d+")) {
            poruka += "Broj golova(nemarkirani) | ";
        } else {

            int brTim2 = Integer.parseInt(brTim2Str);
            if (brTim2 != brGolovaIgracNeMarkirani) {
                poruka += "Broj golova(nemarkirani) nije u skladu sa ukupnim zbirom postignutih golova igrača ove ekipe | ";
            }
            if (brTim2 != brAsistenIgracNeMarkirani) {
                poruka += "Broj golova(nemarkirani) nije u skladu sa ukupnim zbirom asistencija igrača ove ekipe | ";
            }
            if (brTim2 != brPrimljenGolmanMarkirani) {
                poruka += "Broj golova(nemarkirani) nije u skladu sa ukupnim zbirom primljenih golova golmana ove ekipe | ";
            }
        }

        return poruka;
    }

    private void osvjeziStatistiku() {
        jButtonDodajStatistiku.setEnabled(true);
        brGolovaIgracMarkirani = 0;
        brAsistenIgracMarkirani = 0;
        brPrimljenGolmanMarkirani = 0;

        brGolovaIgracNeMarkirani = 0;
        brAsistenIgracNeMarkirani = 0;
        brPrimljenGolmanNemarkirani = 0;
    }
}
