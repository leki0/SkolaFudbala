/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rs.ac.bg.fon.ai.skolafudbala.forme;

import java.io.IOException;
import rs.ac.bg.fon.ai.skolafudbala.klijent.Klijent;
import rs.ac.bg.fon.ai.skolafudbala.model.Fudbaler;
import rs.ac.bg.fon.ai.skolafudbala.model.Raspored;
import rs.ac.bg.fon.ai.skolafudbala.model.Trener;
import rs.ac.bg.fon.ai.skolafudbala.model.TreningGrupa;
import rs.ac.bg.fon.ai.skolafudbala.modelitabele.ModelTabeleTreningGrupa;
import rs.ac.bg.fon.ai.skolafudbala.nacinprikazaforme.Prikaz;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;



/**
 *
 * @author Korisnik
 */
public class PregledTreningGrupaForma extends javax.swing.JFrame {

    List<TreningGrupa> pretrazeneTreningGrupe = new ArrayList<>();

    ModelTabeleTreningGrupa mttg;

    /**
     * Creates new form PregledTreningGrupaForma
     */
    public PregledTreningGrupaForma() {
        initComponents();
        this.setTitle("Informacije o postojećim trening grupama");
        try {
            ucitajListuTrenera();
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        }
        try {
            ucitajListuFudbalera();
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        }
        napuniComboTreneri();
        try {
            popuniTabeluTreningGrupe();
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        }

    }
    List<Trener> listaTrenera = new ArrayList<>();
    List<Fudbaler> listaFudbalera = new ArrayList<>();
    List<Raspored> listaRasporeda = new ArrayList<>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTreningGrupa = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButtonIzmjeni = new javax.swing.JButton();
        jButtonObrisi = new javax.swing.JButton();
        jButtonPretrazi = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxTrener = new javax.swing.JComboBox<>();
        jTextFieldNazivTG = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButtonOsvjezi = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableTreningGrupa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableTreningGrupa);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel1.setText("Trening grupe");

        jButtonIzmjeni.setText("Izmjeni");
        jButtonIzmjeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIzmjeniActionPerformed(evt);
            }
        });

        jButtonObrisi.setText("Obriši");
        jButtonObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonObrisiActionPerformed(evt);
            }
        });

        jButtonPretrazi.setText("Pretraži");
        jButtonPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPretraziActionPerformed(evt);
            }
        });

        jLabel2.setText("Naziv trening grupe:");

        jLabel3.setText("Trener:");

        jButtonOsvjezi.setText("Osvježi");
        jButtonOsvjezi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOsvjeziActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextFieldNazivTG, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jComboBoxTrener, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(jButtonPretrazi, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jButtonIzmjeni, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(167, 167, 167)
                            .addComponent(jButtonOsvjezi, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPretrazi)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxTrener, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNazivTG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonIzmjeni)
                    .addComponent(jButtonObrisi)
                    .addComponent(jButtonOsvjezi))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPretraziActionPerformed
        try {
            String naziv = jTextFieldNazivTG.getText();
            Trener trener = (Trener) jComboBoxTrener.getSelectedItem();

            if (trener == null) {
                trener = new Trener(-1, null, null, null, -1);
            }
            boolean prazno = validirajPrazno(naziv, trener);
            boolean validan = validiraj(naziv);

            if (!prazno) {
                if (validan) {
                    TreningGrupa treningGrupaPretraga = new TreningGrupa(-1, naziv, -1, trener);
                    pretrazeneTreningGrupe = Klijent.getInstance().nadjiTreningGrupe(treningGrupaPretraga);
                    if (pretrazeneTreningGrupe.size() == 1) {
                        JOptionPane.showMessageDialog(this, "Sistem je pronašao trening grupu po zadatim vrijednostima!", "Pretraga", JOptionPane.INFORMATION_MESSAGE);
                        osvjeziPolja();
                    } else {
                        JOptionPane.showMessageDialog(this, "Sistem je pronašao trening grupe po zadatim vrijednostima!", "Pretraga", JOptionPane.INFORMATION_MESSAGE);
                    }
                    osvjeziTabeluPretraga();
                } else {
                    JOptionPane.showMessageDialog(this, "Neispravan format: Naziv ", "GREšKA", JOptionPane.ERROR_MESSAGE);
                    jComboBoxTrener.setSelectedIndex(-1);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Morate da unesete bar jedno polje da biste izvršili pretragu!", "GREšKA", JOptionPane.ERROR_MESSAGE);

            }

        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            } else {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
                jComboBoxTrener.setSelectedIndex(-1);
                if (pretrazeneTreningGrupe.size() > 0) {
                    mttg = new ModelTabeleTreningGrupa(pretrazeneTreningGrupe);
                    jTableTreningGrupa.setModel(mttg);
                }
                try {
                    mttg = new ModelTabeleTreningGrupa();
                } catch (Exception ex1) {
                    if (ex instanceof IOException) {
                        JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                        System.exit(0);
                    }
                }
                jTableTreningGrupa.setModel(mttg);
                osvjeziPolja();
            }
        }
    }//GEN-LAST:event_jButtonPretraziActionPerformed

    private void jButtonIzmjeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIzmjeniActionPerformed
        if (jTableTreningGrupa.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita trening grupu! Morate selektovati bar jednog trenera!", "GRESKA", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                //mttg = new ModelTabeleTreningGrupa();
                TreningGrupa treningGrupa = mttg.get(jTableTreningGrupa.getSelectedRow());
                ucitajListuFudbalera();
                List<Fudbaler> listaFudbaleraIzmjena = new ArrayList<>();
                for (Fudbaler f : listaFudbalera) {
                    if (f.getTreningGrupa().getObjID() == treningGrupa.getObjID()) {
                        listaFudbaleraIzmjena.add(f);
                    }
                }
                listaRasporeda = treningGrupa.getListaRasporeda();
                TreningGrupa treningGrupaBaza = Klijent.getInstance().ucitajTreningGrupu(treningGrupa);
                treningGrupaBaza.setListaRasporeda(listaRasporeda);
                UnosIzmjenaTreningGrupeForma utf = new UnosIzmjenaTreningGrupeForma(this, Prikaz.IZMJENI_FORMA, treningGrupaBaza);
                utf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                utf.setTgIzmj(treningGrupa.getObjID());
                JOptionPane.showMessageDialog(this, "Sistem je učitao trening grupu!", "Trening grupa učitana", JOptionPane.INFORMATION_MESSAGE);
                utf.setVisible(true);
            } catch (Exception ex) {
                if (ex instanceof IOException) {
                    JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                } else {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "GREšKA", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_jButtonIzmjeniActionPerformed

    private void jButtonObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonObrisiActionPerformed
        if (jTableTreningGrupa.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita trening grupu! Morate selektovati bar jednu trening grupu!", "GRESKA", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                //mttg = new ModelTabeleTreningGrupa();
                TreningGrupa treningGrupa = mttg.get(jTableTreningGrupa.getSelectedRow());
                List<Fudbaler> listaFudbaleraIzmjena = new ArrayList<>();
                for (Fudbaler f : listaFudbalera) {
                    if (f.getTreningGrupa().getObjID() == treningGrupa.getObjID()) {
                        listaFudbaleraIzmjena.add(f);
                    }
                }
                listaRasporeda = treningGrupa.getListaRasporeda();
                TreningGrupa treningGrupaBaza = Klijent.getInstance().ucitajTreningGrupu(treningGrupa);
                treningGrupaBaza.setListaRasporeda(listaRasporeda);
                UnosIzmjenaTreningGrupeForma utf = new UnosIzmjenaTreningGrupeForma(this, Prikaz.OBRISI_FORMA, treningGrupaBaza);
                utf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                utf.setTreningGrupaIzmjena(treningGrupa);
                JOptionPane.showMessageDialog(this, "Sistem je učitao trening grupu!", "Trening grupa učitana", JOptionPane.INFORMATION_MESSAGE);
                utf.setVisible(true);
            } catch (Exception ex) {
                if (ex instanceof IOException) {
                    JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                    System.exit(0);
                } else {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "GREšKA", JOptionPane.ERROR_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_jButtonObrisiActionPerformed

    private void jButtonOsvjeziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOsvjeziActionPerformed
        try {
            popuniTabeluTreningGrupe();
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        }
        osvjeziPolja();
        pretrazeneTreningGrupe = new ArrayList<>();
    }//GEN-LAST:event_jButtonOsvjeziActionPerformed

    public List<Trener> getListaTrenera() {
        return listaTrenera;
    }

    public void setListaTrenera(List<Trener> listaTrenera) {
        this.listaTrenera = listaTrenera;
    }

    public List<Fudbaler> getListaFudbalera() {
        return listaFudbalera;
    }

    public void setListaFudbalera(List<Fudbaler> listaFudbalera) {
        this.listaFudbalera = listaFudbalera;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonIzmjeni;
    private javax.swing.JButton jButtonObrisi;
    private javax.swing.JButton jButtonOsvjezi;
    private javax.swing.JButton jButtonPretrazi;
    private javax.swing.JComboBox<Trener> jComboBoxTrener;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableTreningGrupa;
    private javax.swing.JTextField jTextFieldNazivTG;
    // End of variables declaration//GEN-END:variables

    private void ucitajListuTrenera() throws Exception {

        listaTrenera = Klijent.getInstance().ucitajListuTrenera();

    }

    private void ucitajListuFudbalera() throws Exception {

        listaFudbalera = Klijent.getInstance().ucitajListuFudbalera();

    }

    private void popuniTabeluTreningGrupe() throws Exception {
        mttg = new ModelTabeleTreningGrupa();
        jTableTreningGrupa.setModel(mttg);
    }

    private void napuniComboTreneri() {
        for (Trener t : listaTrenera) {
            jComboBoxTrener.addItem(t);
        }
        jComboBoxTrener.setSelectedIndex(-1);
    }

    private boolean validiraj(String naziv) {
        if ((!naziv.equals(""))) {
            if (!naziv.matches("[a-zA-Z]+")) {
                return false;
            }
        }
        return true;
    }

    private void osvjeziTabeluPretraga() {
        System.out.println("VELICINA "+pretrazeneTreningGrupe.size());
        mttg = new ModelTabeleTreningGrupa(pretrazeneTreningGrupe);
        jTableTreningGrupa.setModel(mttg);

    }

    public void osvjezi() {
        try {
            mttg = new ModelTabeleTreningGrupa();
        } catch (Exception ex) {
            if (ex instanceof IOException) {
                JOptionPane.showMessageDialog(this, "Greska! Pokusajte kasnije!", "GREŠKA", JOptionPane.ERROR_MESSAGE);
                System.exit(0);
            }
        }
        jTableTreningGrupa.setModel(mttg);
    }

    private void osvjeziPolja() {
        jTextFieldNazivTG.setText("");
        jComboBoxTrener.setSelectedIndex(-1);
    }

    private boolean validirajPrazno(String naziv, Trener trener) {
        if (naziv.equals("") && trener.getObjID() == -1) {
            return true;
        }
        return false;
    }
}
